						-*-org-*-

* v1.0.0
** v0.1.0
*** v0.0.1
**** May at least handle systemctl-powered daemon
May see grafana dashboard as graphical inspiration
- [ ] The configuration must be handled as a directory where each file
  can be a different service configuration
**** [feature_Partials] Start to handle webcontent
:LOGBOOK:
CLOCK: [2023-02-01 mer. 12:31]--[2023-02-01 mer. 13:01] =>  0:30
CLOCK: [2023-01-26 jeu. 10:56]--[2023-01-26 jeu. 11:26] =>  0:30
CLOCK: [2023-01-12 jeu. 07:47]--[2023-01-12 jeu. 07:58] =>  0:11
CLOCK: [2023-01-12 jeu. 07:40]--[2023-01-12 jeu. 07:47] =>  0:07
CLOCK: [2023-01-06 ven. 08:40]--[2023-01-06 ven. 08:57] =>  0:17
CLOCK: [2023-01-06 ven. 06:49]--[2023-01-06 ven. 07:08] =>  0:19
:END:
- [X] Must use a go-powered template engine
  template/text seems to be the choice
- [X] Should have a global template handling function
  but how to handle template variables ?
- [X] Continue to switch actual hardcoded pages in main to real templates
  The form page is remaining but actually, the page is half printed due
  to myName print.
- [X] Add bootstrap  
- [ ] Understand how to embed the layout/header template as partials
  see https://stackoverflow.com/a/43818930
  - [ ] Partials may go in another directory (add to main's templateDirs var)  
  - [ ] Try to embed one partial
  - [ ] The hello page doesn't work anymore
- [ ] Use jquery
- [ ] Add a body margin to CSS  
- [ ] Now to handle a layout template for example with header and footer
  partials  
**** TODO Command line arguments handling
:LOGBOOK:
CLOCK: [2023-01-26 jeu. 10:33]--[2023-01-26 jeu. 10:42] =>  0:09
CLOCK: [2023-01-02 lun. 07:07]--[2023-01-02 lun. 07:17] =>  0:10
:END:
- [X] May print an intro in console containing version and revision
- [X] Auto-open system browser at startup
- [ ] Handle interface type --web, --cli, --tui
  https://www.freecodecamp.org/news/microservices-and-software-system-design-course/
- [ ] May make this project public when it works
**** DONE Correct project status and tutorial work
:LOGBOOK:
CLOCK: [2022-12-27 mar. 04:42]--[2022-12-27 mar. 05:03] =>  0:21
CLOCK: [2022-12-23 ven. 03:10]--[2022-12-23 ven. 03:24] =>  0:14
CLOCK: [2022-12-20 mar. 06:50]--[2022-12-20 mar. 06:57] =>  0:07
CLOCK: [2022-12-20 mar. 06:13]--[2022-12-20 mar. 06:28] =>  0:15
CLOCK: [2022-12-15 jeu. 04:25]--[2022-12-15 jeu. 04:38] =>  0:13
CLOCK: [2022-12-13 mar. 01:11]--[2022-12-13 mar. 01:23] =>  0:12
CLOCK: [2022-11-30 mer. 19:06]--[2022-11-30 mer. 19:11] =>  0:05
CLOCK: [2022-11-23 mer. 06:33]--[2022-11-23 mer. 06:49] =>  0:16
:END:
- [X] Add AGPL license
- [X] Continue tutorial  https://go.dev/doc/tutorial/create-module
- [X] Create a basic HTTP server
  https://www.digitalocean.com/community/tutorials/how-to-make-an-http-server-in-go
  - [X] Multiplexing Request Handlers
  - [X] Running Multiple Servers at One Time
  - [X] Inspecting a Requestâ€™s Query String
  - [X] Reading a Request Body
  - [X] Retrieving Form Data
  - [X] Responding with Headers and a Status Code
  - [X] Conclusion    
- [X] May handle 404 error  
- [X] May add unit tests
  - [X] Must create a new _test file
  - [X] Explain in README  
- [X] May be multi interfaces (web, CLI, TUI)
