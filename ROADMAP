						-*-org-*-

* v1.0.0
** v0.1.0
*** v0.0.1
**** May at least handle systemctl-powered daemon
:LOGBOOK:
CLOCK: [2023-07-04 mar. 11:52]--[2023-07-04 mar. 12:15] =>  0:23
:END:
May see grafana dashboard as graphical inspiration
- [ ] The configuration must be handled as a directory where each file
  can be a different service configuration
- [ ] getCfgDirectory impl
  - [ ] Continue unit tests implementation
  - [ ] Implement  
**** Start to add a array of struct-based sidebar
:LOGBOOK:
CLOCK: [2023-09-22 ven. 08:51]--[2023-09-22 ven. 09:00] =>  0:09
CLOCK: [2023-09-22 ven. 08:04]--[2023-09-22 ven. 08:16] =>  0:12
CLOCK: [2023-07-04 mar. 11:40]--[2023-07-04 mar. 11:44] =>  0:04
CLOCK: [2023-06-15 jeu. 07:14]--[2023-06-15 jeu. 07:43] =>  0:29
CLOCK: [2023-05-22 lun. 01:47]--[2023-05-22 lun. 02:24] =>  0:37
CLOCK: [2023-05-22 lun. 01:20]--[2023-05-22 lun. 01:37] =>  0:17
CLOCK: [2023-05-04 jeu. 12:43]--[2023-05-04 jeu. 12:47] =>  0:04
CLOCK: [2023-05-04 jeu. 11:28]--[2023-05-04 jeu. 11:56] =>  0:28
:END:
see https://getbootstrap.com/docs/5.0/examples/sidebars/ for example
Testing in root.tmpl

- [X] May create a partial : done but how can we handle =current page=
- [X] Add to form page
  Testing , template markup added but it doesn't work
  =template "sidebarTMPL" not defined'=
- [ ] Or, we could handle a full Array of items as : in test in sidebar.go
  [{ name, slur, active:bool}]
  - But how to handle sub items ?
  - [ ] Implement a getItemByName
  - [ ] Maybe an util function to make a special named page active (making
    all other page non-active). Unit test this.
    
- [ ] Change Sidebar's page name and links in every page
  Actually trying in hello page using helloActive variable
    
- [ ] Add sidebar to Hello page
- [ ] SVG-based icon can't be seen
  
**** Must make the CI and unit test work
:LOGBOOK:
CLOCK: [2023-10-12 jeu. 01:36]--[2023-10-12 jeu. 01:52] =>  0:16
:END:
- [ ] Some tests actually fail
- [ ] Then, make github actions test for this
**** Could make the TestWrongUrlRequestShouldFail and other unit tests work
:LOGBOOK:
CLOCK: [2023-09-04 lun. 10:39]--[2023-09-04 lun. 10:52] =>  0:13
CLOCK: [2023-07-13 jeu. 13:42]--[2023-07-13 jeu. 13:50] =>  0:08
CLOCK: [2023-07-13 jeu. 13:27]--[2023-07-13 jeu. 13:36] =>  0:09
CLOCK: [2023-07-12 mer. 14:50]--[2023-07-12 mer. 15:03] =>  0:13
CLOCK: [2023-07-04 mar. 10:30]--[2023-07-04 mar. 11:03] =>  0:33
:END:
- [X] Make the TestGetCfgDirectory test work
- [X] Add the missing   TestGetCfgDirectory test 
- [ ] Must make the TestWrongUrlRequestShouldFail test work
  Returns Resquest and Error objects
  https://pkg.go.dev/net/http#Request
- [ ] Maybe we need a http.Client object ?
**** Must generate API documentation with godoc
:LOGBOOK:
CLOCK: [2023-08-04 ven. 05:40]--[2023-08-04 ven. 05:43] =>  0:03
CLOCK: [2023-07-13 jeu. 12:43]--[2023-07-13 jeu. 12:50] =>  0:07
CLOCK: [2023-06-23 ven. 10:24]--[2023-06-23 ven. 10:40] =>  0:16
CLOCK: [2023-05-03 mer. 11:33]--[2023-05-03 mer. 11:49] =>  0:16
:END:
- [X] Need to install go-tools package on manjaro : =pamac install go-tools=
  =godoc -http=:6060= and open http://127.0.0.1:6060/pkg/jepasq/gostatus/
- [X] In godoc homepage, jepasq/gostatus doesn't have an associated description
  Maybe it's the =module overview=
- [X] Create a very simpla Makefile with build, check and doc
- [X] Maybe add a clean rule to Makefile
- [ ] Continue documentation
https://go.dev/doc/comment

**** go dependency upgrades
:LOGBOOK:
CLOCK: [2023-08-18 ven. 04:05]--[2023-08-18 ven. 04:20] =>  0:15
CLOCK: [2023-07-13 jeu. 12:06]--[2023-07-13 jeu. 12:08] =>  0:02
CLOCK: [2023-06-16 ven. 06:17]--[2023-06-16 ven. 06:22] =>  0:05
CLOCK: [2023-04-25 mar. 11:41]--[2023-04-25 mar. 11:41] =>  0:00
:END:
- [X] 13 Jul. 2023 : Upgrade x/sys from 0.9.0 to 0.10.0
- [X] 18 Aug. 2023 : Upgrade x/sys from 0.10 to 0.11
- =go list -u -m all= to list upgradable dependencies
- =go get -u ./...= to upgrade
**** TODO Command line arguments handling
:LOGBOOK:
CLOCK: [2023-11-29 mer. 09:02]--[2023-11-29 mer. 09:15] =>  0:13
CLOCK: [2023-11-21 mar. 03:46]--[2023-11-21 mar. 04:05] =>  0:19
CLOCK: [2023-10-27 ven. 04:21]--[2023-10-27 ven. 04:42] =>  0:21
CLOCK: [2023-10-20 ven. 02:38]--[2023-10-20 ven. 02:53] =>  0:15
CLOCK: [2023-03-20 lun. 07:57]--[2023-03-20 lun. 08:11] =>  0:14
CLOCK: [2023-01-26 jeu. 10:33]--[2023-01-26 jeu. 10:42] =>  0:09
CLOCK: [2023-01-02 lun. 07:07]--[2023-01-02 lun. 07:17] =>  0:10
:END:
- [X] May print an intro in console containing version and revision
- [X] Auto-open system browser at startup
- [X] May make this project public when it works
- [X] May move all .go files in a src/ directory
  Seems to works but we have a segmentation violation here
  Should change content/template names
- [X] Handle interface type --web, --cli, --tui
  Trying to define ifacetype constants in a separate file
  - [X] Trying even to use a separate module
    https://go.dev/doc/code#Library
  - [X] Maybe a IfacetypeToStr string  to make debugging easier
  
- [ ] See if this course can be interesting  
  https://www.freecodecamp.org/news/microservices-and-software-system-design-course/
**** DONE Fix the hello/ page routing issue
:LOGBOOK:
CLOCK: [2023-06-16 ven. 06:28]--[2023-06-16 ven. 06:43] =>  0:15
CLOCK: [2023-06-15 jeu. 06:15]--[2023-06-15 jeu. 06:19] =>  0:04
CLOCK: [2023-05-30 mar. 05:32]--[2023-05-30 mar. 06:17] =>  0:45
CLOCK: [2023-04-11 mar. 10:29]--[2023-04-11 mar. 10:59] =>  0:30
CLOCK: [2023-04-05 mer. 12:50]--[2023-04-05 mer. 12:59] =>  0:09
CLOCK: [2023-04-05 mer. 12:30]--[2023-04-05 mer. 12:43] =>  0:13
CLOCK: [2023-03-29 mer. 10:42]--[2023-03-29 mer. 10:48] =>  0:06
CLOCK: [2023-03-23 jeu. 05:46]--[2023-03-23 jeu. 05:52] =>  0:06
CLOCK: [2023-03-23 jeu. 05:33]--[2023-03-23 jeu. 05:37] =>  0:04
:END:
- [X] Use jquery and make the first page alert shake
- [X] The hello page doesn't work anymore
  Try to test if it is correctly rendered
  The hello page test pass but it shouldn't
- [X] Home could have a title and other page too
- [X] Add a form page unit test
- [X] See why the router doesn't work for this page because FORM page works
  We don't have a error now
**** DONE Start to handle webcontent
:LOGBOOK:
CLOCK: [2023-03-06 lun. 06:06]--[2023-03-06 lun. 06:17] =>  0:11
CLOCK: [2023-02-20 lun. 06:19]--[2023-02-20 lun. 06:40] =>  0:21
CLOCK: [2023-02-10 ven. 10:59]--[2023-02-10 ven. 11:23] =>  0:24
CLOCK: [2023-02-06 lun. 08:42]--[2023-02-06 lun. 08:46] =>  0:04
CLOCK: [2023-02-01 mer. 12:31]--[2023-02-01 mer. 13:01] =>  0:30
CLOCK: [2023-01-26 jeu. 10:56]--[2023-01-26 jeu. 11:26] =>  0:30
CLOCK: [2023-01-12 jeu. 07:47]--[2023-01-12 jeu. 07:58] =>  0:11
CLOCK: [2023-01-12 jeu. 07:40]--[2023-01-12 jeu. 07:47] =>  0:07
CLOCK: [2023-01-06 ven. 08:40]--[2023-01-06 ven. 08:57] =>  0:17
CLOCK: [2023-01-06 ven. 06:49]--[2023-01-06 ven. 07:08] =>  0:19
:END:
- [X] Must use a go-powered template engine
  template/text seems to be the choice
- [X] Should have a global template handling function
  but how to handle template variables ?
- [X] Continue to switch actual hardcoded pages in main to real templates
  The form page is remaining but actually, the page is half printed due
  to myName print.
- [X] Add bootstrap  
- [X] Understand how to embed the layout/header template as partials
  see https://stackoverflow.com/a/43818930
  - [X] Partials may go in another directory (add to main's templateDirs var)  
  - [X] Try to embed one partial
- [X] Now to handle a layout template for example with header and footer
  partials
- [X] Add a body margin to CSS
  
**** DONE Correct project status and tutorial work
:LOGBOOK:
CLOCK: [2022-12-27 mar. 04:42]--[2022-12-27 mar. 05:03] =>  0:21
CLOCK: [2022-12-23 ven. 03:10]--[2022-12-23 ven. 03:24] =>  0:14
CLOCK: [2022-12-20 mar. 06:50]--[2022-12-20 mar. 06:57] =>  0:07
CLOCK: [2022-12-20 mar. 06:13]--[2022-12-20 mar. 06:28] =>  0:15
CLOCK: [2022-12-15 jeu. 04:25]--[2022-12-15 jeu. 04:38] =>  0:13
CLOCK: [2022-12-13 mar. 01:11]--[2022-12-13 mar. 01:23] =>  0:12
CLOCK: [2022-11-30 mer. 19:06]--[2022-11-30 mer. 19:11] =>  0:05
CLOCK: [2022-11-23 mer. 06:33]--[2022-11-23 mer. 06:49] =>  0:16
:END:
- [X] Add AGPL license
- [X] Continue tutorial  https://go.dev/doc/tutorial/create-module
- [X] Create a basic HTTP server
  https://www.digitalocean.com/community/tutorials/how-to-make-an-http-server-in-go
  - [X] Multiplexing Request Handlers
  - [X] Running Multiple Servers at One Time
  - [X] Inspecting a Requestâ€™s Query String
  - [X] Reading a Request Body
  - [X] Retrieving Form Data
  - [X] Responding with Headers and a Status Code
  - [X] Conclusion    
- [X] May handle 404 error  
- [X] May add unit tests
  - [X] Must create a new _test file
  - [X] Explain in README  
- [X] May be multi interfaces (web, CLI, TUI)
